#!/usr/bin/env bash


function backupFile()
{
    local file folder name
    file=$1
    folder=$2
    name=$( basename -- "$file" )

    mkdir -p -- "$folder"
    if [[ ! -d "$folder" ]]; then
        echo "$folder is not a folder like it should be." 1>&2
        return 1
    fi

    if [[ ! -f "$file" ]]; then
        echo "$file does not exist, so nothing to back up" 1>&2
        return 0
    fi

    if [[ -e "$folder/$name" || -e "$folder/$name.xz" || -e "$folder/$name.bz2" ]]; then
        echo "$name or $name.xz or $name.bz2 already exists in backup folder $folder. Can not back it up." 1>&2
        return 1
    fi

    if ! mv --no-clobber -- "$file" "$folder/"; then
        echo "Could not backup '$file' into '$folder'." 1>&2
        return 1
    fi

    if command -v lbzip2 >/dev/null 2>&1; then
        lbzip2 "$folder/$name"
    elif command -v xz >/dev/null 2>&1; then
        xz "$folder/$name"
    fi
}


function updateHddMetadata()
(
    folder=metadata-$( date +%Y-%m-%d )
    mkdir -p "$folder"
    cd "$folder"

    sudo lshw -class disk > lshw.log
    sudo lshw -class disk -json > lshw.json

    smartctl --scan > smartctl-scan.log

    for device in $( smartctl --scan | sed -nE 's:^/dev/((sd|nvme)[a-z0-9]+) .*:\1:p' ); do
        sudo smartctl --xall "/dev/$device" > "smartctl-xall-$device.log"
        sudo smartctl --xall --json "/dev/$device" > "smartctl-xall-$device.json"
    done

    lsblk --output-all --list | jq '.' > lsblk.log
    lsblk --json --output-all --list | jq '.' > lsblk.json

    sudo fdisk -l > fdisk.log
    veracrypt --text --volume-properties > veracrypt.log
)


function updateHdds()
{
    if [ "$1" == '--help' ] || [ "$1" == '-h' ]; then
        echo "$0 [--help|-h] <path-to-index-folder>"
        return 0
    fi

    indexFolder=$1
    if test -z "$indexFolder"; then indexFolder=.; fi

    mkdir -p -- "$indexFolder"
    if ! test -d "$indexFolder"; then
        echo "Could not create index folder '$indexFolder'. Please specify a different one."
        return 1
    fi
    cd -- "$indexFolder" || return 1

    # gather mounted block devices and paths to logs
    mountPoints=()
    targetIndexFiles=()
    targetDirIndexFiles=()
    while read -r mountPoint; do
        if ! test -d "$mountPoint"; then continue; fi

        # get a nice log file name by removing /media/ or / prefixes, replacing sole '/' with 'root'
        targetIndexFile="${mountPoint#/media/}"
        targetIndexFile="${targetIndexFile#/}"
        if test "${targetIndexFile#boot}" != "$targetIndexFile"; then
            continue
        fi
        if test -z "$targetIndexFile"; then
            if test "$mountPoint" == '/'; then
                targetIndexFile='root'
            else
                targetIndexFile="${mountPoint#/}"
            fi
        fi
        targetIndexFile="${targetIndexFile//\//-}"

        # check if such a log already exists and is recent enough in order to allow continuing an aborted indexing
        if [[ ( -e "${targetIndexFile}.log" &&
                "$( date --date="@$( stat -c %Y "${targetIndexFile}.log" )" +%Y-%m-%d )" == "$( date +%Y-%m-%d )" ) ||
              ( -e "${targetIndexFile}-dirs.log" &&
                "$( date --date="@$( stat -c %Y "${targetIndexFile}-dirs.log" )" +%Y-%m-%d )" == "$( date +%Y-%m-%d )" ) ]]
        then
            echo "Skipping already recent enough '${targetIndexFile}'" 1>&2
            continue
        fi

        mountPoints+=( "$mountPoint" )
        targetIndexFiles+=( "${targetIndexFile}.log" )
        targetDirIndexFiles+=( "${targetIndexFile}-dirs.log" )
    done < <( lsblk -o MOUNTPOINT | sort -u | sed '/^$/d; /^\/snap\//d; /^MOUNTPOINT$/d;' )

    printf 'In folder %s\nwill create indices: %s\nfor mount points:%s\n' "$( pwd )" "${targetIndexFiles[*]}" "${mountPoints[*]}"

    # check which files would be overwritten and generate a backup folder name and decide whether to compress them
    oldestDate=
    compressBackup=0
    nFilesToBackup=0
    for fileToBeWritten in 'df.log' "${targetIndexFiles[@]}" "${targetDirIndexFiles[@]}"; do
        if ! test -f "$fileToBeWritten"; then continue; fi
        (( nFilesToBackup += 1 ))

        fileDate="$( stat -c %Y -- "$fileToBeWritten" )"
        if test -z "$oldestDate" || test "${fileDate%s}" -lt "$oldestDate"; then
            oldestDate="${fileDate%s}"
        fi

        if test "$( stat -c %s -- "$fileToBeWritten" )" -gt $(( 1 * 1024 * 1024 )); then
            compressBackup=1
        fi
    done
    if test -n "$oldestDate"; then
        backupFolder="backup-$( date --date="@$oldestDate" +%Y-%m-%d )"
    else
        backupFolder="backup-$( date +%s )"
    fi
    mkdir -p -- "$backupFolder"
    if ! test -d "$backupFolder"; then
        echo "Could not create backup folder: $backupFolder" 1>&2
        return 1
    fi

    if test "$nFilesToBackup" -gt 0; then
        msg=
        if test "$compressBackup" -eq 1; then msg=' and compressed'; fi
        printf 'Some files need to be backed up. They will be moved into '"'%s'"'%s\n' "$(pwd)/$backupFolder" "$msg"
    fi

    # actually do the indexing and backing up files (have this in same loop for better data integrity)
    timeCommand=()
    if test -x '/usr/bin/time'; then
        timeCommand=( /usr/bin/time -f '%E needed for %C' )
    fi

    for (( i = 0; i < ${#mountPoints[@]}; ++i )); do
        backupFile "${targetIndexFiles[i]}" "$backupFolder/" || continue
        backupFile "${targetDirIndexFiles[i]}" "$backupFolder/" || continue

        echo "Indexing ${mountPoints[i]} to ${targetIndexFiles[i]}" 1>&2
        tmpFile=$( mktemp )
        "${timeCommand[@]}" find "${mountPoints[i]}" -mount -type d > "$tmpFile" || continue
        tmpDirFile=$( mktemp )
        "${timeCommand[@]}" find "${mountPoints[i]}" -mount > "$tmpDirFile" || continue

        # Only after everything is finished, copy to index folder in order to avoid half-finished states when canceling
        mv -- "$tmpFile" "${targetDirIndexFiles[i]}"
        mv -- "$tmpDirFile" "${targetIndexFiles[i]}"

        echo
    done

    # compress backupped files (inside loop to get rid of used space before filling it again)
    #find "$backupFolder" -type f -name '*.log' -execdir xz {} \;

    'mv' -- df.log "$backupFolder" 2>/dev/null
    df -h | 'grep' -v tmpfs > df.log

    # Remove the backup folder if for some reason it is empty
    rmdir -- "$backupFolder" 2>/dev/null
}

updateHdds "$@"
