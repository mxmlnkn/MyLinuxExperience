#!/usr/bin/env bash

function updateHdds()
(
    if [ "$1" == '--help' ] || [ "$1" == '-h' ]; then
        echo "$0 [--help|-h] <path-to-index-folder>"
        return 0
    fi

    indexFolder=$1
    if test -z "$indexFolder"; then indexFolder=.; fi

    mkdir -p -- "$indexFolder"
    if ! test -d "$indexFolder"; then
        echo "Could not create index folder '$indexFolder'. Please specify a different one."
        return 1
    fi
    cd -- "$indexFolder"

    # gather mounted block devices and paths to logs
    mountPoints=()
    targetIndexFiles=()
    targetDirIndexFiles=()
    while read mountPoint; do
        if ! test -d "$mountPoint"; then continue; fi

        mountPoints+=( "$mountPoint" )

        # get a nice log file name by removing /media/ or / prefixes, replacing sole '/' with 'root'
        targetIndexFile="${mountPoint#/media/}"
        targetIndexFile="${targetIndexFile#/}"
        if test -z "$targetIndexFile"; then
            if test "$mountPoint" == '/'; then
                targetIndexFile='root'
            else
                targetIndexFile="${mountPoint#/}"
            fi
        fi
        targetIndexFile="${targetIndexFile//\//-}"
        targetIndexFiles+=( "${targetIndexFile}.log" )
        targetDirIndexFiles+=( "${targetIndexFile}-dirs.log" )
    done < <( lsblk -o MOUNTPOINT | sort -u | sed '/^$/d; /^\/snap\//d; /^MOUNTPOINT$/d;' )

    printf 'In folder %s\nwill create indices: %s\nfor mount points:%s\n' "$( pwd )" "${targetIndexFiles[*]}" "${mountPoints[*]}"

    # check which files would be overwritten and generate a backup folder name and decide whether to compress them
    oldestDate=
    compressBackup=0
    nFilesToBackup=0
    for fileToBeWritten in 'df.log' "${targetIndexFiles[@]}" "${targetDirIndexFiles[@]}"; do
        if ! test -f "$fileToBeWritten"; then continue; fi
        (( nFilesToBackup += 1 ))

        fileDate="$( stat -c %Y -- "$fileToBeWritten" )"
        if test -z "$oldestDate" || test "${fileDate%s}" -lt "$oldestDate"; then
            oldestDate="${fileDate%s}"
        fi

        if test "$( stat -c %s -- "$fileToBeWritten" )" -gt $(( 1 * 1024 * 1024 )); then
            compressBackup=1
        fi
    done
    if test -n "$oldestDate"; then
        backupFolder="backup-$( date --date="@$oldestDate" +%Y-%m-%d )"
    else
        backupFolder="backup-$( date +%s )"
    fi
    mkdir -p -- "$backupFolder"
    if ! test -d "$backupFolder"; then
        echo "Could not create backup folder: $backupFolder" 1>&2
        return 1
    fi

    if test "$nFilesToBackup" -gt 0; then
        msg=
        if test "$compressBackup" -eq 1; then msg=' and compressed'; fi
        printf 'Some files need to be backed up. They will be moved into '"'%s'"'%s\n' "$(pwd)/$backupFolder" "$msg"
    fi

    # actually do the indexing and backing up files (have this in same loop for better data integrity)
    timeCommand=()
    if test -x '/usr/bin/time'; then
        timeCommand=( /usr/bin/time -f '%E needed for %C' )
    fi

    for (( i = 0; i < ${#mountPoints[@]}; ++i )); do
        'mv' -- "${targetIndexFiles[i]}" "$backupFolder/" 2>/dev/null
        'mv' -- "${targetDirIndexFiles[i]}" "$backupFolder/" 2>/dev/null

        # compress backupped files (inside loop to get rid of used space before filling it again)
        find "$backupFolder" -type f -name '*.log' -execdir xz {} \;

        echo "Indexing ${mountPoints[i]} to ${targetIndexFiles[i]}" 1>&2
        "${timeCommand[@]}" find "${mountPoints[i]}" -mount -type d > "${targetDirIndexFiles[i]}"
        "${timeCommand[@]}" find "${mountPoints[i]}" -mount         > "${targetIndexFiles[i]}"
    done

    'mv' -- df.log "$backupFolder" 2>/dev/null
    df -h | 'grep' -v tmpfs > df.log

    # Remove the backup folder if for some reason it is empty
    rmdir -- "$backupFolder" 2>/dev/null
)

updateHdds "$@"
