#!/bin/bash

# Call with e.g.
#   ugoira.sh 44913837_ugoira600x600.zip
# The first part of the file name must be the pixiv ID!
# Or do:
#    find . -name '*_ugoira*.zip' | xargs -I {} -P 4 zip2gif '{}'

echoerr() { echo "$@" 1>&2; }

function zip2gif()
{
    # converts pixiv style zip files into gifs or mkvs
    local fileName tmp fps format

    tmp=$( mktemp -d )
    fileName=$1
    shift 1
    format=$1
    shift 1
    fps=25
    if [ -n "$1" ] && [ "$1" -eq "$1" ] ; then
        fps=$1
    fi

    if [ ! -f "$fileName" ]; then
        echoerr "\e[31m[ugoira] '$fileName' does not exist"'!'"\e[0m"
        return 1
    fi

    unzip -q "$fileName" -d "$tmp"

    # only one delay time for all images, which makes it possible to use ffmpeg easily instead of imageMagic
    local firstFile ext number digits outFile
    firstFile=$( find "$tmp" -mindepth 1 -maxdepth 1 -type f | sed -nr '1{ s|.*/||p; }' )
    ext=${firstFile##*.}
    number=${firstFile%.*}
    digits=${#number}

    if [ "$format" == "gif" ]; then
        outFile=$tmp/res.gif
        ffmpeg -i "$tmp/%0${digits}d.$ext" -vf palettegen -y "$tmp/palette.png" 1>&2 2>/dev/null
        ffmpeg -framerate "$fps" -i "$tmp/%0${digits}d.$ext" -i "$tmp/palette.png" -filter_complex paletteuse "$outFile" 1>&2 2>/dev/null
    else
        outFile=$tmp/res.$format
        echo ffmpeg -framerate "$fps" -i "$tmp/%0${digits}d.$ext" "$outFile" 1>&2 2>/dev/null
        ffmpeg -framerate "$fps" -i "$tmp/%0${digits}d.$ext" "$outFile" 1>&2 2>/dev/null
    fi

    command mv "$outFile" "${fileName%.zip}.${outFile##*.}"
    rm -r "$tmp"
}


fps=25
force=0
format=

while [ $# -gt 0 ] ; do
{
    case "$1" in
        -h|--help)
            cat << EOF
Command line: zip2gif [options] <zip file>
Options:
-f|--fps INTEGER     Specify the frames per second to use
   --gif             Create a GIF
-h|--help            Show this help
   --mkv             Create a MKV video file
   --mp4             Create a MP4 video file
EOF
            exit 0
            ;;
        -f|--force)
            force=1
            shift 1
            ;;
        --gif)
            format=gif
            shift 1
            ;;
        --mkv)
            format=mkv
            shift 1
            ;;
        --mp4)
            format=mp4
            shift 1
            ;;
        --fps)
            shift 1
            fps=$1
            shift 1
            ;;
        *)  # default case (neither one of the options from above, nor empty)
            if [ ${1:0:1} == '-' ]; then
                echo "Wrong parameters specified! (\$1=$1)"
                exit 1
            else
                fileName="$1"
                shift 1
                break
            fi
            ;;
    esac
}
done


if [ -z "$fileName" ]; then
    echoerr 'No zip file given!'
    exit 1
fi

if ! [ -f "$fileName" ]; then
    echoerr "$fileName does not exist"'!'
    exit 1
fi

if [ -z "$format" ]; then
    # Decide whether to make GIF or mkv, based on "projected file size" which is expected to be large if jpg are used,
    # but small if png are used and zip also is small, because gif and png both have better comparabale lossless
    # compression than comparing jpg to gif
    if [ "$( wc -c "$fileName" | cut -d' ' -f 1 )" -gt $(( 8*1024*1024 )) ]; then
        echoerr -e "\e[37mMake mp4 because zip is rather large\e[0m"
        format=mp4
    else
        format=gif
    fi
fi


if [[ ( "$force" -eq 1 ) || ( ! -f "${fileName%.zip}.$format" ) ]]; then
    zip2gif "$fileName" "$format" "$fps"
fi
