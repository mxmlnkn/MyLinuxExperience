#!/bin/bash
#
# ToDo
#  - Handle .part1 files, normally E.g. part1.rar gets extracted and and moved
#    into extracted/ then .part2.rar will also be tried to extract again, to
#    abstain from that we would have to search the list of given files for
#    ones which could be part of this rar file. But there are more than one
#    naming scheme ...
#    Or just move the other parts, should be enough. Could also try to know
#    the other parts by using strace, but that is not available often
#  - zip and unzip don't seem to have any way (like --) to allow file names
#    starting with '-'!

# log all stderr and stdout into files (but still display them)
exec 1> >( tee -ia ~/logs/extract.log )
exec 2> >( tee -ia ~/logs/extract.log >&2 )

function echoerr() { echo "$@" 1>&2; }

function getArchiveCommand() {
    if [ ! -f "$1" ] ; then return 1; fi
    # How to find out the mime-types file reports:
        #  echo "hello" > test
        #    tar  -cf world.tar world
        #    bzip2 -k world.tar
        #    gzip  -k world.tar
        #    xz    -k world.tar
        #    lzma  -k world
        #    bzip2 -k world
        #    gzip  -k world
        #    7z   a world.7z  world
        #    rar  a world.rar world
        #    zip -u world.zip world
        #    ar x world.deb
        #  for file in *.*; do file --mime-type "$file"; done
        #    world.7z     : application/x-7z-compressed
        #    world.lzma   : application/octet-stream
        #    world.rar    : application/x-rar
        #    world.tar    : application/x-tar
        #    world.bz2    : application/x-bzip2
        #    world.tar.bz2: application/x-bzip2
        #    world.gz     : application/gzip
        #    world.tar.gz : application/gzip
        #    world.tar.xz : application/x-xz
        #    world.zip    : application/zip
        #    world.deb    : application/vnd.debian.binary-package
        # Note that the .gz files are not differing from the .tar.gz or
        # .tgz files obviously. We need to look into them and see
        # if they only contain a single .tar archive
        local mime=$( file --dereference --mime-type -- "$1" | 'sed' 's|^.*: application/||' )
        if [ "$verbose" -eq 1 ] 2>/dev/null; then
            echoerr "raw type: $mime"
        fi
        case "$mime" in
            x-7z-compressed)            echo '7z'           ;;
            octet-stream)               echo 'lzma'         ;;
            x-rar)                      echo 'rar'          ;;
            x-tar)                      echo 'tar'          ;;
            x-bzip2)                    echo 'bzip2'        ;;
            gzip)                       echo 'gzip'         ;;
            x-xz)                       echo 'xz'           ;;
            zip)                        echo 'zip'          ;;
            pdf)                        echo 'pdfimages'    ;;
            x-sqlite3)                  echo 'sqlite3'      ;;
            vnd.debian.binary-package)  echo 'ar'           ;;
            *)
                case "$1" in
                    *.7z)      echo '7z'            ;;
                    *.exe)     echo 'cabextract'    ;;
                    *.lzma)    echo 'lzma'          ;;
                    *.tar.lrz) echo 'lrztar'        ;;
                    *.tar.bz2) echo 'tar'           ;;
                    *.tar.gz)  echo 'tar'           ;;
                    *.tar.xz)  echo 'tar'           ;;
                    *.tar)     echo 'tar'           ;;
                    *.tbz2)    echo 'tar'           ;;
                    *.tgz)     echo 'tar'           ;;
                    *.bz2)     echo 'bzip2'         ;;
                    *.gz)      echo 'gzip'          ;;
                    *.rar)     echo 'rar'           ;;
                    *.zip)     echo 'zip'           ;;
                    *.xz)      echo 'xz'            ;;
                    *.deb)     echo 'ar'            ;;
                    *.pdf)     echo 'pdfimages'     ;;
                    *)
                        echoerr -e "\e[31m[getArchiveCommand] Unknown archive type for file '$1' with mime type '$mime'"'!'"\e[0m"
                        return 1
                        ;;
                esac
                ;;
        esac
        return 0
}


function singleFileInArchive() {
    local file files nFiles firstFile folderRegex cmdW
    # test if archive contains single file or single folder so we can
    # extract it without polluting the working folder, but also without
    # creating unnecessary folders
    local unpackCommand=$( getArchiveCommand "$1" )
    case "$unpackCommand" in
        '7z')
        {
            cmd=( '7z' 'l' '-slt' )
            # Example Output:
            #    7-Zip [64] 15.14 : Copyright (c) 1999-2015 Igor Pavlov : 2015-12-31
            #    p7zip Version 15.14.1 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,4 CPUs Intel(R) Core(TM) i3-3220 CPU @ 3.30GHz (306A9),ASM)
            #
            #    Scanning the drive for archives:
            #    1 file, 118 bytes (1 KiB)
            #
            #    Listing archive: mimi.7z
            #
            #    --
            #    Path = mimi.7z
            #    Type = 7z
            #    Physical Size = 118
            #    Headers Size = 118
            #    Solid = -
            #    Blocks = 0
            #
            #    ----------
            #    Path = a
            #    Size = 0
            #    Packed Size = 0
            #    Modified = 2016-07-15 21:50:48
            #    Attributes = A_ -rw-r--r--
            #    Encrypted = -
            #    Method =
            #    Block =
            #
            #    Path = b
            #    Size = 0
            #    Packed Size = 0
            #    Modified = 2016-07-15 21:50:48
            #    Attributes = A_ -rw-r--r--
            #    Encrypted = -
            #    Method =
            #    Block =
            if isEncrypted "$1"; then
                if [ -z "$password" ]; then
                    echoerr -e "File is encrypted, but no password set!"
                    return 1
                fi
                cmd+=( "-p$password" )
            fi

            files=()
            while IFS= read -d $'\n' -r file ; do
                files+=( "$file" )
            done < <( "${cmd[@]}" "$1" |
                      sed -nr '/^Path = /{N;s|^Path = (.*)\n(Size\|Folder) = .*|\1|p;}' )
        }
        ;;
        'tar')
        {
            cmd=( 'tar' '-tf' )
            # Output is like this (note: may be absolute paths!):
            #   xarchiver-0.5.2/
            #   xarchiver-0.5.2/po/
            #   xarchiver-0.5.2/po/ChangeLog
            # Did the output change oO? Now the output is e.g. like this:
            #   a/b
            #   a/c
            # Maybe the first output is only for tar.bz2 files and the like?
            #   -> nope, can't reproduce/proof this hypothesis

            files=()
            while IFS= read -d $'\n' -r file ; do
                files+=("$file")
            done < <( "${cmd[@]}" "$1" )
        }
        ;;
        'rar')
        {
            # Output of rar l world.rar is like this:
            #   RAR 5.30 beta 2   Copyright (c) 1993-2015 Alexander Roshal   4 Aug 2015
            #   Trial version             Type RAR -? for help
            #
            #   Archive: world2.rar
            #   Details: RAR 4
            #
            #    Attributes      Size     Date    Time   Name
            #   ----------- ---------  ---------- -----  ----
            #    -rw-r--r--         6  2016-05-05 14:51  world
            #    -rw-r--r--         6  2016-05-05 16:06  oho/world
            #   ----------- ---------  ---------- -----  ----
            #                      12                    2
            #
            # Output of rar lt world.rar is like this:
            #   RAR 5.30 beta 2   Copyright (c) 1993-2015 Alexander Roshal   4 Aug 2015
            #   Trial version             Type RAR -? for help
            #
            #   Archive: world2.rar
            #   Details: RAR 4
            #
            #           Name: world
            #           Type: File
            #           Size: 6
            #    Packed size: 16
            #          Ratio: 266%
            #          mtime: 2016-05-05 14:51:14,000
            #     Attributes: -rw-r--r--
            #          CRC32: 363A3020
            #        Host OS: Unix
            #    Compression: RAR 3.0(v29) -m3 -md=128K
            #
            #           Name: oho/world
            #           Type: File
            #           Size: 6
            #    Packed size: 16
            #          Ratio: 266%
            #          mtime: 2016-05-05 16:06:47,000
            #     Attributes: -rw-r--r--
            #          CRC32: 363A3020
            #        Host OS: Unix
            #    Compression: RAR 3.0(v29) -m3 -md=128K
            cmd=( 'rar' 'lt' )
            if isEncrypted "$1"; then
                if [ -z "$password" ]; then
                    echoerr -e "File is encrypted, but no password set!"
                    return 1
                fi
                cmd+=( "-p$password" )
            fi

            files=()
            while IFS= read -d $'\n' -r file ; do
                files+=("$file")
            done < <( "${cmd[@]}" "$1" |
                      sed -nr 's|^[ \t]+Name: (.*)$|\1|p' )
        }
        ;;
        'zip')
        {
            cmd=( 'zipinfo' '-1' )
            #if isEncrypted "$1"; then
            #    if [ -z "$password" ]; then
            #        echoerr -e "File is encrypted, but no password set!"
            #        return 1
            #    fi
            #    cmd+=( "-p$password" )
            #fi
            #  => zipinfo has no password option

            # Output of zipinfo -1 world.zip
            #   world
            #   oho/world

            files=()
            while IFS= read -d $'\n' -r file ; do
                files+=("$file")
            done < <( "${cmd[@]}" "$1" )
        }
        ;;
        'pdfimages')
        {
            test "$( pdfimages -q -list -- "$1" | wc -l )" -le 1
            return $?
        }
        ;;
        'sqlite3')
        {
            #test "$( sqlite3 "$1" .tables | wc -l )" -le 1
            #return $?
            return 1
        }
        ;;
        'ar')
        {
            test "$( ar -t -- "$1" | wc -l )" -le 1
            return $?
        }
        ;;
        # bzip2 and gz only work for single files
        'gzip'|'bzip2'|'lzma'|'xz')
            local name=$(basename "$1")
            local suffix=${name##*.}
            if [ "$name" == "$suffix" ]; then
                echo "$1.un$unpackCommand"
            else
                echo "${name%.*}"
            fi
            return 0
            ;;
        *)
            echoerr -e "\e[31m Listing files not supported for file '$1' with type '$(getArchiveCommand "$1")'"'!'"\e[0m" 1>&2
            return 1
            ;;
    esac

    if [ $verbose -eq 1 ]; then
        echoerr "File List of Archive (${#files[@]}):"
        for file in "${files[@]}"; do
            echoerr "  $file"
        done
    fi

    if [ ${#files[@]} -le 1 ]; then
        echo "${files[0]}"
        return 0
    else
    {
        # find out if all are in the same folder
        if [ "${files[0]:0:1}" == '/' ]; then
            echoerr -e "\e[31archive seems to contain absolute paths ('${files[0}\'), which are not supported by this script. Maybe you can add it to this script?\e[0m"
            return 1
        elif [ "$(dirname "${files[0]}")" == '.' ] && [ "${files[0]: -1}" != '/' ]; then
            # more than one file and first file is in no subdirectory,
            #  at least one other file will be in the top directory
            #
            # this check is necessary or else the folder extraction
            # from the first file name with ${files[0]%%/*} may return
            # something wrong i.e. the file name itself, resulting in
            # a false positive for archive structures like:
            #  a    <- file! (+ folder with same name exists)
            #  a/b
            #  a/c
            # Other case
            # a/b
            # a
            return 1
        else
            # Check if maybe all files in the archive share the same
            # directory they are in, i.e. the archives top level
            # contains only one folder
            if [ $verbose -eq 1 ]; then
                echoerr "Folder Prefix: ${files[0]%%/*}"
            fi
            for file in "${files[@]}"; do
                # it is not necessary to check if it is actually a file:
                #    [ "${file%%/*}" == "$file" ]
                # because there can't be a folder and a file with the same name
                if [ "${file%%/*}" != "${files[0]%%/*}" ]; then
                    if [ $verbose -eq 1 ]; then
                        echoerr "The file '$file' lies in a different top-folder than '${files[0]%%/*}'"
                    fi
                    return 1
                fi
            done
            return 0
        fi
    }
    fi

}

function isEncrypted() {
    # tests $1 if encrypted. If $2 is given, then try if that is the correct
    # password
    local pw=
    if [ ! -z "$2" ]; then pw="$2"; fi
    if [ $verbose -eq 1 ]; then
        echoerr -e "\e[37mTest archive '$1' using password: $pw\e[0m"
    fi
    case $(getArchiveCommand "$1") in
        7z)
            if [ -z "$pw" ]; then pw='-'; fi
            '7z' t "-p$pw" -- "$1" 2>&1 | 'grep' -q 'Wrong password?'
            return $?
            ;;
        rar)
            if [ -z "$pw" ]; then pw='-'; fi
            'rar' t "-p$pw" -- "$1" 2>&1 | 'grep' -q 'Corrupt file or wrong password'
            return $?
            ;;
        zip)
            if [ -z "$pw" ]; then pw=' '; fi
            # Can't use -T option in zip for this -.-!!!!! see this bug report
            # http://www.info-zip.org/phpBB3/viewtopic.php?f=3&t=147&hilit=password
            # last version of zip is from 2009 -> Linux is dead
            # Note that space after -P is possible, but leads to problems, if the password starts with a hyphen -
            if [ -n "$pw" ]; then
                # This tests the whole archive and therefore will in total need twice the time -.-
                'unzip' -t "-P$pw" "$1" 2>&1 | 'grep' -q 'because of incorrect password'
            else
                # http://www.info-zip.org/mans/zipinfo.html
                'zipinfo' -1 -s   | 'sed' '1d;2d;$d' | 'awk' '{ print $5; }' | 'grep' '[BT]' -q
            fi
            ;;
        *)
            return 1;
            ;;
    esac
}

pwfile=$HOME/etc/extractpws
if [ ! -f "$pwfile" ]; then
    mkdir -p "$HOME/etc/"
    touch "$pwfile"
fi

function cachePassword() {
    if [ -z "$1" ]; then return; fi
    if ! 'grep' -q "^$1\$" "$pwfile"; then
        echo "$1" >> "$pwfile"
    fi
}

function askPassword() {
    # sets global variable password, if necessary
    password='-'

    if [ $verbose -eq 1 ]; then
        echoerr -e "\e[37mTry to find password in cache ...\e[0m"
    fi
    # first test if a valid password can be found in the database
    while read line; do
        if ! isEncrypted "$1" "$line"; then
            password=$line
            if [ $verbose -eq 1 ]; then
                echoerr -e "\e[37mFound password: $password\e[0m"
            fi
            break
        fi
    done <"$pwfile"

    # if not in database ask user
    while isEncrypted "$1" "$password"; do
        read -p "Password [Enter s to skip this archive]: " -s password
        echo ''
        if [ "$password" == 's' ] || [ -z "$password" ]; then
            return 1
        fi
    done

    cachePassword "$password"
    return 0
}


function extractHere() {
    # $1 path to file to extract
    # $2 enforce certain program usage / extension e.g. 7z on files where unzip or unrar fails because of bad encoding errors
    if [ ! -f "$1" ]; then
        echoerr -e "\e[31mCouldn't find file '$1'\e[0m"
        return 1
    fi
    local ext=$(getArchiveCommand "$1")
    if test -n "$2"; then ext=$2; fi

    local redirect='/dev/tty'   # &1 won't get interpreted, instead creates a file named '&1'
    local quiet=
    if [ $verbose -eq 0 ]; then
        redirect='/dev/null'
        quiet='-q'
    fi
    local errorlog=$(mktemp)

    if [ "$dryrun" -eq 1 ]; then
        return 0
    fi

    case "$ext" in
        '7z'|'zip')  # because unzip doesn't work well with unicode names
            # if verbose is 0 we can't redirect to /dev/null, because then
            # the user would miss a command prompt if the file to extract
            # already exists and we would wait forever!
            if isEncrypted "$1"; then
                7z x -p"$password" -- "$1"
            else
                7z x -- "$1"
            fi
            return $?
            ;;
        'bzip2')
            local name=$(basename "$1")
            local suffix=${name##*.}
            if [ "$name" == "$suffix" ]; then
                pv -- "$1" | bzip2 $quiet -d -k > "$1.unbz2"
            else
                pv -- "$1" | bzip2 $quiet -d -k > "${name%.*}"
            fi
            return $?
            ;;
        'exe')   cabextract   "$1"; return $? ;;
        'lzma')
            local name=$(basename "$1")
            local suffix=${name##*.}
            if [ "$name" == "$suffix" ]; then
                pv -- "$1" | lzma $quiet -d -k > "$1.unlzma"
            else
                pv -- "$1" | lzma $quiet -d -k > "${name%.*}"
            fi
            return $?
            ;;
        'tar')   tar -C . -xf "$1"; return $? ;;
        'gzip')
            # use -S to suppress
            #    gzip: 'file' unknown suffix -- ignored
            # warning. Won't work if file name does not contain any .
            local name=$(basename "$1")
            local suffix=${name##*.}
            if [ "$verbose" -eq 1 ]; then
                echoerr -e "\e[37mSuffix = $suffix\e[0m"
            fi
            if [ "$name" == "$suffix" ]; then
                pv -- "$1" | gzip -d -k > "$1.ungz"
            else
                pv -- "$1" | gzip -d -k > "${name%.*}"
            fi
            return $?
            ;;
        'rar')
            # https://superuser.com/questions/708877/how-to-unrar-the-stdin
            # https://stackoverflow.com/questions/32341691/unrar-and-progress-bar-bash
            if isEncrypted "$1"; then
                #echoerr "unrar x -p$password $1 1>$redirect"
                unrar x -p"$password" -- "$1" 1>$redirect
            else
                #echoerr "unrar x $1 1>$redirect"
                unrar x -- "$1" 1>$redirect
            fi
            return $?
            ;;
        'xz')
            local name=$(basename "$1")
            local suffix=${name##*.}
            if [ "$name" == "$suffix" ]; then
                pv -- "$1" | xz $quiet -d -k > "$1.unxz"
            else
                pv -- "$1" | xz $quiet -d -k > "${name%.*}"
            fi
            return $?
            ;;
        'zip')
            # https://unix.stackexchange.com/questions/2690/how-to-redirect-output-of-wget-as-input-to-unzip
            if isEncrypted "$1"; then
                'unzip' -P "$password" "$1" 2>&1 >"$ " | tee "$errorlog"
            else
                'unzip' "$1" 2>&1 >"$redirect" | tee "$errorlog"
            fi
            local errorCode=${PIPESTATUS[0]}

            if grep -q 'error:  cannot create ' "$errorlog" ||
               grep -q 'Invalid or incomplete multibyte or wide character' "$errorlog"
            then
                if test "$verbose" -eq 1; then
                    echoerr -e "\e[37mTrying to extract '$1' with 7z, because unzip has problems with some file name encodings\e[0m"
                fi
                extractHere "$1" '7z'
                errorCode=$?
            fi

            return $errorCode
            ;;
        'pdfimages')
            pdfimages -all -p -- "$1" 'page'
            return 1 # hacky... return error, because by default pdf are not to be deleted, because more often than not PDF are more than just images ...
            ;;
        'sqlite3')
            (
                # https://github.com/darrentu/convert-db-to-csv/blob/master/convert-db-to-csv.sh
                local table tables=( $( sqlite3 "$1" .tables ) )
                for table in "${tables[@]}"; do
                    sqlite3 "$1" <<EOF
.mode csv
.headers on
.output $table.csv
SELECT * FROM $table;
.exit
EOF
                done
            )
            ;;
        'ar')
            ar -x -- "$1"
            ;;
        #Z)     uncompress   "$1" ;;
        #tar.lrz) lrztar -d   "$1" ;;
        *) return 1 ;;
    esac
}

function trashArchive() {
    local archive=$1
    local trashFolder='./extracted'
    local dummy=

    if [ "$keep" -eq 1 ]; then
        return
    fi

    if [ "$dryrun" -eq 1 ]; then
        local dummy='echo'
    fi

    if [ "$delete" -eq 1 ]; then
        $dummy rm -- "$archive"
        return 0
    fi

    $dummy mkdir -p "$trashFolder"
    # trash other parts of multipart archive
    if echo "$archive" | grep -q 'part[0-9]\{1,\}.rar$'; then
        # find doesn't seem to have an option for simply matching [0-9]+, so
        # we have to repeat it manually to [0-9][0-9] and so on
        local sr='[0-9]'
        local numbers=
        for (( i=0; i<5; ++i )); do
            numbers="${numbers}${sr}"
            nameMatch=$(echo "$archive" | sed -r 's|part[0-9]+\.rar$|'"part${numbers}.rar|")
            # ^ did mimi.part1.rar -> mimi.part[0-9].rar
            find "$(dirname "$archive")" -maxdepth 1 -type f -name "$nameMatch" \
                 -execdir $dummy mv -- '{}' "$trashFolder" \;
         done
    else
        $dummy mv -- "$archive" "$trashFolder"
    fi
}



function packTestArchives() {
    # $1 : password to use. If it is a path to a valid file,
    #      then no password will be used
    # $@ : list of files/folders to pack up
    # returns: folder where archives reside in

    local password
    if [ ! -f "$1" ]; then
        password=$1
        shift
    fi

    if [ $# -le 0 ]; then
        echoerr -e "\e[31mNo arguments specified to packTestArchives"'!'"\e[0m"
    fi

    local folder=$(mktemp -d)
    echo "$folder"

    7z  a "$folder/test.7z"  "$@" 1>/dev/null
    rar a "$folder/test.rar" "$@" 1>/dev/null
    zip   "$folder/test.zip" "$@" 1>/dev/null
    tar --create --file="$folder/test.tar" "$@"
    bzip2 --keep --stdout --compress "$folder/test.tar" > "$folder/test.tar.bz2"
    gzip  --keep --stdout            "$folder/test.tar" > "$folder/test.tar.gz"
    lzma  --keep --stdout --compress "$folder/test.tar" > "$folder/test.tar.lzma"
    xz    --keep --stdout --compress "$folder/test.tar" > "$folder/test.tar.xz"
    if [ $# -eq 1 ]  && [ "${1/\//}" == "$1" ]; then
        bzip2 --keep --stdout --compress "$1" > "$folder/test.bz2"
        gzip  --keep --stdout            "$1" > "$folder/test.gz"
        lzma  --keep --stdout --compress "$1" > "$folder/test.lzma"
        xz    --keep --stdout --compress "$1" > "$folder/test.xz"
    fi

    # make links to archives without the suffix and also with spaces in the name
    local file
    for file in "$folder"/*.*; do
        local fname=$(basename "$file")
        ln -s -T "$file" "$(dirname "$file")/${fname/./ }"  # . -> spaces
        ln -s -T "$file" "$(dirname "$file")/${fname/./}"   # just remove .'s
    done

    if [ -z "$password" ]; then
        return
    fi

    # redo same with password. Needs sudo apt-get install -t sid expect
    folder="$folder/password"
    mkdir "$folder"

    7z  a -ptest        "$folder/test.7z"  "$@" 1>/dev/null
    rar a -ptest        "$folder/test.rar" "$@" 1>/dev/null
    zip --password test "$folder/test.zip" "$@" 1>/dev/null

    for file in "$folder"/*.*; do
        local fname=$(basename "$file")
        ln -s -T "$file" "$(dirname "$file")/${fname/./ }"  # . -> spaces
        ln -s -T "$file" "$(dirname "$file")/${fname/./}"   # just remove .'s
    done
}

function testArchive() {
    local folder=$(mktemp -d)
    local extract=$(mktemp -d)
    local file

    local shouldCreateFolder=$1
    shift

    # create alle files and folders
    if [ $# -le 0 ]; then
        echoerr -e "\e[31mNo file names specified to testArchive"'!'"\e[0m"
    fi
    cd "$folder"
    local files=("$@")
    for file in "${files[@]}"; do
        if [ ! -d "$(dirname "$file")" ]; then
            mkdir -p "$(dirname "$file")"
        fi
        touch "$file"
        echo "Test" > "$file"
    done

    ######### pack, unpack and check files ########
    echoerr -n -e "\e[37mCreating test archives..."
    local target=$(packTestArchives test "$@")
    echoerr -e "Done [$target]\e[0m"
    cachePassword 'test'
    for file in "$target"/* "$target/password"/*; do
        if [ ! -f "$file" ]; then
            continue
        fi
        echoerr -n -e "\e[37m  $file ."

        ######## test while being in the same folder as the targeted archive ########
        cd "$extract"
        local fname=$(basename "$file")
        rm -r ./* 2>/dev/null
        #ln -s -T "$file" "$fname"
        cp "$file" "$fname"
        # Symbolic links aren't supported by bzip2 -.-, so we need to copy it
        #   echo test > a
        #   bzip2 --compress --keep a
        #   ln -s a.bz2 b.bz2
        #   bzip2 -d b.bz2
        #       bzip2: Input file b.bz2 is not a normal file.
        #   https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=41217
        main --keep "$fname" 1>/dev/null &
        # do a busy loop in case main/extract hangs e.g. for password input with
        # no password given. the 'timeout' command doesn't work with shell
        # functions, only with executables, e.g. could call the file this
        # script resides in ...
        local pid=$!
        local waitTill=$((SECONDS+2))
        while [ $SECONDS -lt $waitTill ] && kill -0 $pid 2>/dev/null; do :; done
        local exitCode=
        if kill -0 $pid 2>/dev/null; then
            kill $pid
            exitCode=1
        else
            wait $pid
            exitCode=$?
        fi

        if [ $exitCode -eq 0 ]; then
            #unlink "$fname"
            rm "$fname"
        fi
        echoerr -n "."
        local targetFolder=$extract
        if [ $shouldCreateFolder -eq 1 ]; then
            # as we know that the file name itself contains no dots,
            # we can strip anything after the first dot, this also
            # includes double extensions like .tar.bz2 resulting in:
            #   test.tar.bz2 -> test/
            targetFolder="$extract/${fname%%.*}/"
        elif [ ${#files[@]} -eq 1 ] && [ "${files[0]/\//}" == "${files[0]}" ]; then
            local unfiles=()
            local tmpfile
            while IFS= read -d $'\0' -r tmpfile ; do unfiles+=("$tmpfile")
            done < <('find' "$targetFolder" -mindepth 1 -maxdepth 1 \( \
                                 -name '*.unbz2'  -o \
                                 -name '*.ungz'   -o \
                                 -name '*.unlzma' -o \
                                 -name '*.unxz' \) -print0 )
            local allfiles=()
            while IFS= read -d $'\0' -r tmpfile; do allfiles+=("$tmpfile")
            done < <('find' "$targetFolder" -mindepth 1 -maxdepth 1 -print0 )
            if [ ${#unfiles[@]} -eq 1 ] && [ ! -z "${unfiles[0]}" ]; then
                mv "${unfiles[0]}" "$targetFolder/$(basename "${files[0]}")"
            elif [ ${#allfiles[@]} -eq 1 ] && (
                 [ "${fname##*.}" == 'bz2'  ] ||
                 [ "${fname##*.}" == 'gz'   ] ||
                 [ "${fname##*.}" == 'lzma' ] ||
                 [ "${fname##*.}" == 'xz'   ] )
            then
                local from="${allfiles[0]}"
                local to="$targetFolder/$(basename "${files[0]}")"
                if [ "$from" != "$to" ]; then
                    mv "$from" "$to"
                fi
            fi
        fi
        if ! diff -r "$targetFolder" "$folder"; then
            echoerr -e "\e[31m[Single File per Archive] Test with '$fname' in '$(pwd)' failed"'!'"\e[0m"
            exit 1
        fi
        echoerr -n "."

        ######## test while being in another folder ########
        cd ".." # should normally be /tmp
        rm -r "$extract"/* 2>/dev/null
        #ln -s -T "$file" "$extract/$fname"
        cp "$file" "$extract/$fname"
        main --keep "$extract/$fname" 1>/dev/null &
        local pid=$!
        local waitTill=$((SECONDS+2))
        while [ $SECONDS -lt $waitTill ] && kill -0 $pid 2>/dev/null; do :; done
        local exitCode=
        if kill -0 $pid 2>/dev/null; then
            kill $pid
            stty echo   # password prompt turns this off
            exitCode=1
        else
            wait $pid
            exitCode=$?
        fi

        if [ $exitCode -eq 0 ]; then
            #unlink "$extract/$fname"
            rm "$extract/$fname"
        fi
        echoerr -n "."
        local targetFolder=$extract
        if [ $shouldCreateFolder -eq 1 ]; then
            targetFolder="$extract/${fname%%.*}/"
        elif [ ${#files[@]} -eq 1 ] && [ "${files[0]/\//}" == "${files[0]}" ]; then
            local unfiles=()
            local tmpfile
            while IFS= read -d $'\0' -r tmpfile; do unfiles+=("$tmpfile")
            done < <('find' "$targetFolder" -mindepth 1 -maxdepth 1 \( \
                                 -name '*.unbz2'  -o \
                                 -name '*.ungz'   -o \
                                 -name '*.unlzma' -o \
                                 -name '*.unxz' \) -print0 )
            local allfiles=()
            while IFS= read -d $'\0' -r tmpfile; do allfiles+=("$tmpfile")
            done < <('find' "$targetFolder" -mindepth 1 -maxdepth 1 -print0 )
            if [ ${#unfiles[@]} -eq 1 ] && [ ! -z "${unfiles[0]}" ]; then
                mv "${unfiles[0]}" "$targetFolder/$(basename "${files[0]}")"
            elif [ ${#allfiles[@]} -eq 1 ] && (
                 [ "${fname##*.}" == 'bz2'  ] ||
                 [ "${fname##*.}" == 'gz'   ] ||
                 [ "${fname##*.}" == 'lzma' ] ||
                 [ "${fname##*.}" == 'xz'   ] )
            then
                local from="${allfiles[0]}"
                local to="$targetFolder/$(basename "${files[0]}")"
                if [ "$from" != "$to" ]; then
                    mv "$from" "$to"
                fi
            fi
        fi
        if ! diff -r "$targetFolder" "$folder"; then
            echoerr -e "\e[31m[Single File per Archive] Test with '$file' failed"'!'"\e[0m"
            exit 2
        fi
        echoerr -e "\e[37m Done\e[0m"
    done
}

function runtests() {
    echo "Archive containing only 1 file"
    #testArchive 0 "a a"
    echo "Archive containing only 1 folder with only 1 file"
    #testArchive 0 "a a/b b"
    echo "Archive containing only 1 folder with 2 files"
    #testArchive 0 "a a/b b" "a a/c c"
    #echo "Archive containing 2 files"
    testArchive 1 "a a" "a b"
    #echo "Archive containing 3 files"
    #testArchive 1 "a a" "a b" "c"
    #echo "Archive containing files and folders"
    #testArchive 1 "a a" "a b/c d"
}


##################################### main #####################################

function main() {
    local args=("$@")
    verbose=0
    dryrun=0
    keep=0
    skip=0
    delete=0
    while [ ! -z "$1" ]; do
        case "$1" in
            '-h' | '--help')
                echo '
Usage: extract <file> [<file> [...]]

   -d|--delete   delete files instead of moving them in a subfolder "extracted/"
   -k|--keep     do not move the extracted archives into a folder "extracted/"
   -n|--dry-run  dry-run i.e. do not remove archives and do not extract
   -t|--tests    run tests
   -v|--verbose  show more debug output
   -s|--skip     skip archive test before extracting
'
                return 0
                ;;
            '-v' | '--verbose')
                verbose=1
                shift
                ;;
            '-d' | '--delete')
                delete=1
                shift
                ;;
            '-n' | '--dry-run')
                dryrun=1
                shift
                ;;
            '-s' | '--skip')
                skip=1
                shift
                ;;
            '-t' | '--tests')
                runtests
                return 0
                ;;
            '-k' | '--keep')
                keep=1
                shift
                ;;
            '--')
                shift
                break
                ;;
            *)
                break
                ;;
        esac
    done

    local problemOccured=0
    # Commented out, beginning of: 'Extract at folder where archive resides in'
    local oldPath=$(pwd)
    while [ ! -z "$1" ]; do
    {
        local archive=$(basename -- "$1")
        cd "$oldPath"
        cd "$(dirname -- "$1")"
        # just skip folders, makes calls like 'extract *' easier
        if [ -d "$archive" ]; then
            if [ "$verbose" -eq 1 ]; then
                echoerr "'$archive' is a folder, skipping"'!'
            fi
            shift
            continue
        fi
        if [ -f "$archive" ]; then
        {
            echo -e "\e[37mExtracting '$archive'\e[0m"
            if [ $verbose -eq 1 ]; then
                echo "file type: $(getArchiveCommand "$archive")"
            fi
            askPassword "$archive"
            local file
            if file=$(singleFileInArchive "$archive"); then
                if [ $verbose -eq 1 ]; then
                    echoerr -e "\e[37m  Archive contains only one top-level file/folder '$file', not creating folder\e[0m"
                fi
                if extractHere "$archive"; then
                    trashArchive "$archive"
                    # this is necessary to allow recursive extractions of tar.bz2, ... archives
                    if getArchiveCommand "$file" &>/dev/null; then
                        #echoerr "Recursively extracting '$file'"
                        main -d "$file"
                    fi
                else
                    echoerr -e "\e[31mIt seems were there problems when extracting"'!'"\e[0m"
                    problemOccured=1
                fi
            else
            {
                # assuming file does not contain any /!
                local folder=${archive%.*}
                echo -e "\e[37m  Creating folder '$folder' to hold all 'dem files, bro"'!'"\e[0m"
                if [ "$dryrun" -eq 1 ]; then
                    couldCreateFolder=0
                else
                    mkdir "$folder" 2>/dev/null
                    couldCreateFolder=$?
                fi
                if [ "$couldCreateFolder" -eq 0 ] || [ "$('ls' --almost-all "$folder" | 'wc' -l)" -eq 0 ]; then
                    cd "$folder"
                    extractHere "../$archive"
                    local success=$?
                    cd ..
                    if [ $success -eq 0 ]; then
                        trashArchive "$archive"
                    else
                        echoerr -e "\e[31mIt seems were there problems when extracting"'!'"\e[0m"
                        problemOccured=1
                    fi
                else
                    echoerr -e "\e[31mCouldn't create folder: '$folder'. Skipping this archive"'!'"\e[0m"
                    shift
                fi
            }
            fi
        }
        else
            echo -e "\e[31mFile '$archive' does not exist, skipping"'!'"\e[0m"
        fi
        shift
    }
    done

    return $problemOccured
}

main "$@"
