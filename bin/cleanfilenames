#!/bin/bash
# cleanes filename of files in current folder and its subdirectories
# no target directory or file argument possible at the moment
#
# ToDo: create list of files, run sed over this whole list instead of per each file name and then diff this .... Something like find -print0 | tee original.lst | sed -z '...' > changed.lst; diff {original,changed}.lst | xargs -0 -L3 -l3 ...

cleanFilesInDirectory()
{
    # translate hexcodes %ff -> \xff
    # in contrast to recode perl leaves ðŸ˜Š untouched
    perl -C -MHTML::Entities -pe 'decode_entities($_);' |
    sed -z -r '
        # All replacements involving new whitespace characters should be done first, before whitespaces are cleaned!
        s|\n| |g;
        s|:large$||;
        # replace double with single apostrophes
        s/\x22/\x27/g;
        # .html.mht -> .mht
        s/\.m?html\.mht/\.mht/g;
        # delete dots at the end of line (windows has issue with empty extensions -.-)
        s/\.+$//g;
        # convert hex codes (this is not done by perl as these are not HTML entities)
        #   -> could be done with URI::Escape https://metacpan.org/pod/URI::Escape
        s|%20| |g;
        s|";|'\''|g;
        # delete leading spaces
        s/^[ \t]+//g;
        # delete white spaces at end of extension
        s/[ \t]+$//g;
        # delete white spaces at end of file name
        s/[ \t]+(\.[0-9A-Za-z]{3})$/\1/g;
        # delete newlines and returns and other non-printables (will this bug out for UTF8 encoded strings?
        s/[\x01-\x1F\x7F]/ /g;
        s|[ \t]+| |g;
        s|\.png\.jpg|.jpg|;
        s|\.jpg\.png|.png|;

        # Replace some special characters (especially on NTFS/Windows system) with similar other unicode characters
        # Beware that tr does not work with UTF-8 unicode mulitbyte characters correctly ...
        s|[?]|ï¼Ÿ|g;
        s|[*]|ï¼Š|g;
        s|<|ï¼œ|g;
        s|>|ï¼ž|g;
        s|:|ï¼š|g;
        s|[\]|ï¼¼|g;
        s|â€”|-|g; # replace unicode hyphen with normal one because it is allowed
    '
}

# takes piped input!
cleanFilenames() {
    # Windows restrictions: https://msdn.microsoft.com/en-us/library/aa493942%28v=exchg.80%29.aspx
    #    / \ * ? < > |
    #    \x22->\x27 makes: double quote -> single quote
    #    pipestroke -> hyphen
    #    double quote -> single quote
    # Windows: https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx
    #   < > : " / \ | ? *
    # Change HTML-Codes:
    #    &#039; -> '
    #    here is how to correct html codes in existing folder names:
    #       find /media/m -type d -execdir bash -c 'if grep -q "&#039;" <(echo '"'{}'"'); then newname=$(printf "%s" '"'{}'"' | sed "s/&#039;/'"'"'/g"); echo mv "{}"; echo " -> $newname"; mv "{}" "$newname"; fi' \;
    # Use printf instead of echo to make it work for file names starting with e.g. '-e'
    sed -r '
        # $! - If its not a end of file.
        # N  - Append the next line with the pattern space delimited by \n
        # b  - jump to label
        :a
            N
        $!b a
        s/\n/ /g
        # for some reason s/\r//g wouldnt work now :S, that is why it is piped to another sed
    ' | perl -C -MHTML::Entities -pe 'decode_entities($_);' | sed -r '
        s|\.jpg:large|.jpg|;
        # windows restrictions -> the two most important replacements
        s/[|/\:]/ - /g;
        s/[*?<>]/_/g;
        s|â€”|-|g;
        s/\x22/\x27/g;
        # .html.mht -> .mht
        s/\.m?html\.mht/\.mht/g;
        # intrusive and not really necessary. was just because I thought it could spell trouble in bad bash scripts -.-
        #s/[$/_/g;
        # delete dots at the end of line (windows has issue with empty extensions -.-)
        s/\.+$//g;
        s/&#039;/'\''/g;
        # Replace & character. Also quite intrusive ...
        # s|&| and |g;
        s|";|'\''|g;
        # delete leading spaces
        s/^[ \t]+//g;
        # delete white spaces at end of extension
        s/[ \t]+$//g;
        # delete white spaces at end of file name
        s/[ \t]+(\.[0-9A-Za-z]{3})$/\1/g;
        # delete newlines and returns and other non-printables
        s/[\x01-\x1F\x7F]/ /g;
        s|\t| |g;
        s|[ \t]+| |g;
        # convert hex codes
        s|%20| |g;
        # convert extensions to lowercase (quite intrusive)
        # s|(\.[A-Za-z0-9]{3})$|\L\1|;
        # some other obnoxious extensions
        # intrusive
        # s|\.jpeg$|.jpg|;
        s|\.png\.jpg|.jpg|;
        s|\.jpg\.png|.png|;
    '
}

##################################### Main #####################################

dryrun=0
fastNameCheck=0
duplicates=0
dir=.
checkComplexExtension=0
restoreNames=0
deleteEmptyFiles=0
while [ "$1" != "" ]; do
  case $1 in
    "--chk")    # fucking chkdsk deleting all my files with invalid linux filenames into found.000 -.-
        restoreNames=1
        ;;
    "-d" | "--check-duplicates")
        duplicates=1
        ;;
    "-e" | "--check-extensions")
        checkComplexExtension=1
        ;;
    "-f" | "--fast")
        fastNameCheck=1
        ;;
    "-r" | "--dry-run")
        dryrun=1
        ;;
    "-h" | "--help")
        echo "cleanfilenames [-d] [-e] [-r] [-h] [--chk] <folder>

Removes special characters, which are especially troublesome with NTFS partitions
but allowed on ext4 partitions and does some other file name corrections
like removing the trailing ':large' from twitter image files.

  --chk         Try to give sane file names from file contents alone.
                To be used to name recovered files.
  -d|--check-duplicates
                Checks similar files, e.g., 'name.jpg' and 'name (2).jpg' or 'copy of name.jpg'
                are actually identical and if so, removes them.
  -e|--check-extensions
                Checks wheter the file name extension is actually the same as the file contents.
                E.g., renames PNG files wrongly named image.jpg.
  -f|--fast     Use fast name checks, which can be done in parallel and without calling stat on files.
  -r|--dry-run  Don't apply any changes, only show what would be done.
  -h|--help     Show this help
  -z|--delete-empty
                Finds and deletes 0B files. Beware! Sometimes these files may have uses!
"
        exit 0
        ;;
    "-z" | "--delete-empty")
        deleteEmptyFiles=1
        ;;
    *)  # default case (neither one of the options from above, nor empty)
        if [ ${1:0:1} == '-' ]; then
            echo "Wrong parameters specified! (\$1=$1)"
            exit 1
        else
            dir="$1"
            break
        fi
        ;;
  esac
  shift
done

if [[ $fastNameCheck -eq 1 ]]; then
    duplicates=0
    checkComplexExtension=0
    restoreNames=0
    deleteEmptyFiles=0
fi


if [[ $duplicates -eq 1 ]]; then
    echo "Finding and removing duplicates 'name(2).jpg'"
    # Find duplicates and delete them
    find "$dir" -name '*([0-9]).*' -execdir bash -c '
        dryrun="$1"
        fname="$2"
        if [[ $dryrun -eq 0 ]]; then
            dryrun=""
        else
            dryrun=echo
        fi

        fnameorg="$( echo "$fname" | sed -r "s|\([0-9]\)\.([^.]{1-3})|.\1|" )"
        if [ ! -f "$fnameorg" ]; then
            # try windows scheme which also has a space before the "(2)" suffix
            fnameorg="$( echo "$fname" | sed -r "s| \([0-9]\)\.([^.]{1-3})|.\1|" )"
        fi

        if [ ! -f "$fnameorg" ]; then
            $dryrun mv -- "$fname" "$fnameorg"
        elif "diff" -q -- "$fname" "$fnameorg"; then
            $dryrun rm -- "$fname"
        fi
    ' bash "$dryrun" {} \;
fi

# find empty files
if [[ $deleteEmptyFiles -eq 1 ]]; then
    echo "Deleting empty files ..."
    if [[ $dryrun -eq 1 ]]; then
        find "$dir" -type f -size 0c -exec printf 'rm -- %s' {} \;
    else
        find "$dir" -type f -size 0c -delete
    fi
fi

oldNamesFile=$( mktemp )
newNamesFile=$( mktemp )
allNamesFile=$( mktemp )

export -f cleanFilenames
echo -n "Counting how many files in '$dir' need to be checked ... "
find "$dir" -print0 > "$allNamesFile"
nFiles=$( 'grep' -zc . -- "$allNamesFile" )
echo "$nFiles"

if [[ $fastNameCheck -eq 1 ]]; then
    cleanedNamesFile=$( mktemp )
    cat -- "$allNamesFile" | cleanFilesInDirectory > "$cleanedNamesFile"

    dryrunArg=--dryrun
    if [[ $dryrun -eq 0 ]]; then dryrunArg=""; fi
    python3 -c '
import os
import shutil
import sys

dryrun = "--dryrun" in sys.argv
renamed = filter( lambda x: x[0] != x[1],
                  zip( open( sys.argv[1], "rb" ).read().split( b"\0" ),
                       open( sys.argv[2], "rb" ).read().split( b"\0" ) ) )

with open( sys.argv[3], "wb" ) as oldNames, open( sys.argv[4], "wb" ) as newNames:
    # iterate in reversed order because find first prints the folders and then its containing files
    # but we have to first rename the containing files before we can rename the folder!
    for rename in list( renamed )[::-1]:
        oldNames.write( rename[0] + b"\n" )
        newNames.write( rename[1] + b"\n" )
        if not dryrun:
            #assert os.path.isfile( rename[0].decode() )
            #print( "shutil.move( {}, {} )".format( rename[0].decode(), rename[1].decode() ) )
            #shutil.move( rename[0].decode(), rename[1].decode() )
            None
' "$allNamesFile" "$cleanedNamesFile" "$oldNamesFile" "$newNamesFile"

    mv "$allNamesFile" "$dir/all-file-names.lst"
    mv "$cleanedNamesFile" "$dir/cleaned-file-names.lst"

    exit 0
fi

# xargs already does its best to give {} as one command line argument no
# matter the sepcial characters it contains! This comment is not inside the
# bash source, because the {} would be replaced by xargs and lead to errors
# it it contains \n! (Could also introduce space between curly braces in comment)
find "$dir" -print0 | pv -0lps $nFiles | xargs -0 -I {} -P 1 bash -c '
    path="$1"
    name=$( basename -- "$path" )
    cd "$(dirname -- "$path")"
    newname=$( printf "%s" "$name" | cleanFilenames )
if [ "'$checkComplexExtension'" -eq 1 ] && [ -f "$name" ]; then
    mime=$( file --mime -- "$name" | sed -r "s|.*: ([^;]*); .*|\1|" )
    # http://www.iana.org/assignments/media-types/media-types.xhtml
    # /etc/mime.types
    case "$mime" in
        image/gif                  ) mext=gif   ;;
        image/jpeg                 ) mext=jpg   ;;
        image/png                  ) mext=png   ;;
        image/tiff                 ) mext=tif   ;;
        image/vnd.djvu             ) mext=djvu  ;;
        image/x-icon               ) mext=ico   ;;
        image/x-ms-bmp             ) mext=bmp   ;;
        application/x-7z-compressed) mext=7z    ;;
        # octet stream means the file type was not recognized!
        # application/octet-stream   ) mext=lzma  ;;
        application/x-rar          ) mext=rar   ;;
        application/x-tar          ) mext=tar   ;;
        application/x-bzip2        ) mext=bz2   ;;
        application/gzip           ) mext=gz    ;;
        application/x-xz           ) mext=xz    ;;
        application/zip            ) mext=zip   ;;
        video/x-matroska           ) mext=mkv   ;;
        message/rfc822             ) mext=mht   ;;
        audio/x-flac               ) mext=flac  ;;
        #text/plain                 ) mext=txt   ;; # could also be .js in many cases
        text/html                  ) mext=html  ;;
        video/mp4                  ) mext=mp4   ;;
        application/pdf            ) mext=pdf   ;;
        *                          ) mext=      ;;
    esac
    if [ "'$restoreNames'" -eq 1 ]; then
        if [ "$mext" == "mht" ] && [[ "$name" =~ file[0-9]*.[0-9A-Za-z]{3} ]]; then
            subject=$( sed -nr "/^Subject: /,/^Date: /p" "$name" |
                    sed "\$d; s|^Subject: ||;" |
                    sed -z "s|\r\n||; s|\n||g; s|\r||g;" )
            #printf "%s\n" "$subject"
            # contains utf8 control codes:
            # The form is: "=?charset?encoding?encoded text?=".
            subject=$( printf "%s\n" "$subject" |
                sed -r '\''s|(=\?utf-8\?)|\x0\1|g;'\'' |
                xargs -0 -I [] bash -c '\''
                    printf "$( printf "%s\n" "$0" |
                        sed -r "s|^=\?utf-8\?Q\?||; s|\?=||g;
                                s|=([0-9A-F]{2})|\\\\x\1|g" )" '\'' [] )
            #printf "%s\n" "$subject"
            if [ -n "$subject" ]; then newname=$subject.mht; fi
        fi
        # todo: try id3v2, exiftool, ffmpeg, pdfinfo, ... to create a name from metadaa information like author, date, title
    fi

    # Remove extension duplicates e.g. a.png.png.png -> a.png
    # Ignore digit-only extensions, e.g. libssl.so.1.0.0
    ext=${newname##*.}
    if [ "$ext" == "$newname" ]; then
        ext=
    fi
    newNameWoExt=${newname%.*}
    while [ ! -z "$ext" ] && [ ${#ext} -le 4 ] &&
          [ "${newNameWoExt##*.}" == "$ext" ] &&
          [ "${newNameWoExt%.*}" != "$newNameWoExt" ] &&
          ! [ "$ext" -eq "$ext" ] 2>/dev/null  # if not number
    do
        ext=${newNameWoExt##*.}
        newNameWoExt=${newNameWoExt%.*}
    done
    if [ -z "$ext" ]; then
        newname=${newNameWoExt}
    else
        newname=${newNameWoExt}.$ext
    fi

    # change README.README back to README (cause by old bug in this script)
    #if [ "${newname%.*}" == "${newname##*.}" ]; then
    #    newname=${newname%.*}
    #fi

    # this means it most probably is actually the extension and not something
    # different like a word after a full stop or decimal point
    if [ ${#ext} -le 4 ] && [ "$ext" != "$mext" ] && [ ! -z "$mext" ];
    then
        newname=${newname%.*}.$mext
    elif [ "$ext" != "$mext" ] && [ ! -z "$mext" ]; then
        # if the old extension is longer than 4 characters, just append the new extension
        newname=$newname.$mext
    fi
fi

    if [ -n "$newname" ] && [ "$name" != "$newname" ]; then
        # $name -> ext: $ext -> mime: $mime -> mext: $mext\n
        printf "rename: %s\n -> to: %s\n\n" "$(realpath -- "$name")" "$(realpath -- "$newname")"
        if [ ! "'$dryrun'" -eq 1 ]; then
            mv -- "$name" "$newname"
        fi
        printf "%s\n" "$name" >> "'"$oldNamesFile"'"
        printf "%s\n" "$newname" >> "'"$newNamesFile"'"
    fi
' bash {} \;
echo

if [[ ! -f "$dir/old-file-names.lst" && ! -f "$new/old-file-names.lst" ]]; then
    mv "$oldNamesFile" "$dir/old-file-names.lst"
    mv "$newNamesFile" "$dir/new-file-names.lst"
else
    echo "File names are in $oldNamesFile and renamed in $newNamesFile"
fi
