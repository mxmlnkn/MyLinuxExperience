#!/usr/bin/env python2
# -*- coding: utf-8 -*-


import os.path, sys

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#sns.set_palette("deep", desat=.6)
sns.set_context(rc={"figure.figsize": (8, 4)})
np.random.seed(9221999)

def getSeparator( line ):
    separator = None
    for c in line:
        # use the first non-alpha character after # as the separator. That way both space and tabs as seperator can be used and if tabs are used, space can be used in headings
        if c in [ ' ', '\t', ',', ';', '|' ]:
            separator = c
            break
    return separator

def readNamedColFile( fname, requiredSpecifier=[], allowedSpecifier=None, forbiddenSpecifier=[] ):
    # allowed e.g. [ "t", "x", "y", "z", "px", "py", "pz", "dpx", "dpy", "dpz" ]
    data = np.genfromtxt( fname, dtype='float', comments='#', skip_footer=1 ).transpose()
    if len( data.shape ) == 1:
        data = data.reshape( [ 1, data.shape[0] ] )

    # search for format identifier
    format       = None
    firstcomment = None
    for line in open(fname):
        # ignore non-comment lines
        if line[0] != '#':
            break
        if firstcomment is None:
            firstcomment = line
            break
    if firstcomment is None:
        format = [ "column " + str(i) for i in range( data.shape[0] ) ]
    else:
        separator = getSeparator( firstcomment[1:] ) # exclude # from search
        format = [ x for x in firstcomment.strip().split( separator )[1:] if x and len(x) > 0 ]  # strip hashtag

    # check if all required columns are available and if none is forbidden
    correct  = True
    for id in requiredSpecifier:
        reqfound[id] = False
    for id in format:
        if not allowedSpecifier==None and not id in allowedSpecifier:
            print "unknown format specifier found (",id,") !"
            correct = False
        if id in forbiddenSpecifier:
            print "specifier >",id,"< is reserved and may not be used!"
            correct = False
        if np.sum( format == id ) > 1:
            print "specifier >",id,"< was used multiple times, not allowed!"
            correct = False
        if id in requiredSpecifier:
            reqfound[id] = True
    for id in requiredSpecifier:
        if reqfound[id] == False:
            print "required specifier >",id,"< wasn't found in header!"
            correct = False
    if not correct:
        exit()

    datadict = {}
    datadict[ 'properties' ] = {}

    implicitXAxis = 1+data.shape[0] == len(format)
    datadict[ 'properties' ][ 'implicitXAxis' ] = implicitXAxis
    if implicitXAxis:
        if False:
            data = np.concatenate( [ [ np.arange( len( data[0] ) ) ], data ] )
        else:
            datadict[ 'properties' ][ 'xlabel' ] = format[0]
            format = format[1:]

    # copy columns in respective dictionary entries
    assert( data.shape[0] == len(format) )
    for i in range(len(format)):
        datadict.update( { format[i] : data[i] } )

    return datadict


def finishPlot( fig, ax, fname, loc='best', left = None, bottom = None, right = None, top = None, wspace = None, hspace = None ):
    """
    Give ax = [] in order to not draw a legend
    """
    fname = fname.replace( ":", "" )
    if not isinstance( ax, list):
        ax = [ ax ]
    for a in ax:
        l = a.legend( loc=loc, prop={'size':10}, labelspacing=0.2, # fontsize=10 also works
                      fancybox=True, framealpha=0.5, frameon=True )
    #if l != None:
    #    l.set_zorder(0)  # alternative to transparency
    fig.tight_layout()
    fig.subplots_adjust( left = left, bottom = bottom, right = right, top = top, wspace = wspace, hspace = hspace )

    fig.savefig( fname+".pdf" )
    print "[Saved '"+fname+".pdf']"
    fig.savefig( fname+".png" )
    print "[Saved '"+fname+".png']"

    fig.canvas.set_window_title( fname )

    #plt.close( fig )


fname = sys.argv[1]
data = readNamedColFile( fname )

# white, whitegrid, darkgrid, ticks
with sns.axes_style( "whitegrid", { 'axes.linewidth':0.85, 'xtick.major.size': 3, 'xtick.minor.size': 3, 'ytick.major.size': 3, 'ytick.minor.size': 3 } ):
    fig = plt.figure()
    ax = fig.add_subplot( 111 )
    omitLegend = False
    if data['properties']['implicitXAxis']:
        ax.set_xlabel( data['properties']['xlabel'] )
        if len( data ) == 2:
            omitLegend = True
            for key in data:
                if key == 'properties':
                    continue
                ax.set_ylabel( key )
    axes = [ ax ]

    for key in data:
        if key == 'properties':
            continue
        y = data[key]
        print key,y
        if not isinstance( y, np.ndarray ):
            continue
        x = np.arange( len(y) )
        label = None if omitLegend else key
        ax.plot( x, y, label = label, marker = '.' )

    for ax in axes:
        ax.tick_params( direction='out', pad=3 ) # move tick labels closer to axis (standard

    finishPlot( fig, axes, "plot-" + fname ) #, left=0.06, bottom = 0.15, right = 0.96, top = 0.93, wspace = 0.24 )

plt.show()
