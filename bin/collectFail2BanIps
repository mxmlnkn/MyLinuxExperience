#!/usr/bin/env bash

# For /etc/fail2ban/ip.blacklist to take effect you need these files.
# In order to get range banning to work, the idea is to have separate filters and actions for all mask lengths.
# As for the action, you can use the default /etc/fail2ban/action.d/iptables-allports.conf as a base and then add
# a mask argument, which can be set statically for each separate filter and then is added to the iptables call as:
#   iptables -I fail2ban-<name> 1 -s <ip>/<mask> -j DROP

# cat /etc/fail2ban/jail.d/blacklist.conf
#    [ip-blacklist]
#    enabled   = true
#    banaction = iptables-allports-mask
#    port      = anyport
#    filter    = ip-blacklist
#    logpath   = /etc/fail2ban/ip.blacklist
#    maxretry  = 0
#    findtime  = 3153600000
#    bantime   = -1
#
#    [ip-blacklist-24]
#    enabled   = true
#    banaction = iptables-allports-mask[mask=24]
#    port      = anyport
#    filter    = ip-blacklist-24
#    logpath   = /etc/fail2ban/ip.blacklist
#    maxretry  = 0
#    findtime  = 3153600000
#    bantime   = -1
#
#    [ip-blacklist-16]
#    enabled   = true
#    banaction = iptables-allports-mask[mask=16]
#    port      = anyport
#    filter    = ip-blacklist-16
#    logpath   = /etc/fail2ban/ip.blacklist
#    maxretry  = 0
#    findtime  = 3153600000
#    bantime   = -1
#
#    [ip-blacklist-8]
#    enabled   = true
#    banaction = iptables-allports-mask[mask=8]
#    port      = anyport
#    filter    = ip-blacklist-8
#    logpath   = /etc/fail2ban/ip.blacklist
#    maxretry  = 0
#    findtime  = 3153600000
#    bantime   = -1

# sudo cp /etc/fail2ban/action.d/iptables-allports{,-mask}.conf
# cat /etc/fail2ban/action.d/iptables-allports-mask.conf
#    # Fail2Ban configuration file
#    #
#    # Author: Cyril Jaquier
#    # Modified: Yaroslav O. Halchenko <debian@onerussian.com>
#    # 			made active on all ports from original iptables.conf
#    #
#    #
#
#    [INCLUDES]
#
#    before = iptables-common.conf
#
#
#    [Definition]
#
#    # Option:  actionstart
#    # Notes.:  command executed on demand at the first ban (or at the start of Fail2Ban if actionstart_on_demand is set to false).
#    # Values:  CMD
#    #
#    actionstart = <iptables> -N f2b-<name>
#                  <iptables> -A f2b-<name> -j <returntype>
#                  <iptables> -I <chain> -p <protocol> -j f2b-<name>
#
#    # Option:  actionstop
#    # Notes.:  command executed at the stop of jail (or at the end of Fail2Ban)
#    # Values:  CMD
#    #
#    actionstop = <iptables> -D <chain> -p <protocol> -j f2b-<name>
#                 <actionflush>
#                 <iptables> -X f2b-<name>
#
#    # Option:  actioncheck
#    # Notes.:  command executed once before each actionban command
#    # Values:  CMD
#    #
#    actioncheck = <iptables> -n -L <chain> | grep -q 'f2b-<name>[ \t]'
#
#    # Option:  actionban
#    # Notes.:  command executed when banning an IP. Take care that the
#    #          command is executed with Fail2Ban user rights.
#    # Tags:    See jail.conf(5) man page
#    # Values:  CMD
#    #
#    actionban = <iptables> -I f2b-<name> 1 -s <ip>/<mask> -j <blocktype>
#
#    # Option:  actionunban
#    # Notes.:  command executed when unbanning an IP. Take care that the
#    #          command is executed with Fail2Ban user rights.
#    # Tags:    See jail.conf(5) man page
#    # Values:  CMD
#    #
#    actionunban = <iptables> -D f2b-<name> -s <ip>/<mask> -j <blocktype>
#
#    [Init]
#
#    # Option:  mask
#    # Notes.:  used to ban an address-range by netmask(s) in CIDR notation.
#    # Values:  [ 32 | 24 | 16 | 8 ] Default: 32
#    #
#    mask = 32

# cat /etc/fail2ban/filter.d/ip-blacklist.conf
#   [Definition]
#   failregex = ^<HOST>[ ]+.*$
#   ignoreregex =
# cat /etc/fail2ban/filter.d/ip-blacklist-24.conf
#   [Definition]
#   failregex = ^<HOST>/24[ ]+.*$
#   ignoreregex =
# cat /etc/fail2ban/filter.d/ip-blacklist-16.conf
#   [Definition]
#   failregex = ^<HOST>/16[ ]+.*$
#   ignoreregex =
# cat /etc/fail2ban/filter.d/ip-blacklist-8.conf
#   [Definition]
#   failregex = ^<HOST>/8[ ]+.*$
#   ignoreregex =
#
# Then check with:
#   sudo fail2ban-client reload ip-blacklist
#   sudo service fail2ban restart
#   sudo fail2ban-client status ip-blacklist
# Test regex:
#   fail2ban-regex /etc/fail2ban/ip.blacklist '^<HOST>[ ]+.*$'
#   fail2ban-regex /etc/fail2ban/ip.blacklist /etc/fail2ban/filter.d/ip-blacklist.conf
# Verify loaded blacklist:
#   sudo iptables --list --numeric
# Other helpful deubgging tools:
#   fail2ban-client --dp  # --dump-pretty is not accepted even though it should be
# sudo fail2ban-client get dbfile
#    Current database file is:
#    `- /var/lib/fail2ban/fail2ban.sqlite3
# https://github.com/fail2ban/fail2ban/issues/2091#issuecomment-374759712
# https://github.com/fail2ban/fail2ban/issues/1682
# I finally got it to work. First, it seems findtime=-1 is not accepted!
# So, use an ultra large value!
# Second! it remembers the location it has read the file and no restarting, reloading, removing and readding the
# log file works!!! You need to stop it, delete the database, and then restart it


# Block by country
# https://www.axllent.org/docs/ssh-geoip/
# sudo apt-get install geoip-bin geoip-database
#
# sudo vim /usr/local/bin/sshd-filter-by-country.sh
#
# #!/bin/bash
# # UPPERCASE space-separated country codes to ACCEPT
# ALLOW_COUNTRIES="DE"
# if [ $# -ne 1 ]; then
#     echo "Usage:  $( basename -- "$0" ) <ip>" 1>&2
#     exit 0
# fi
# COUNTRY=$( geoiplookup "$1" | sed -nE 's|.*: (.*), .*|\1|p' | head -n 1 )
# if [[ $COUNTRY = "IP Address not found" || $ALLOW_COUNTRIES =~ $COUNTRY ]]; then
#     RESPONSE="ALLOW"
# else
#     RESPONSE="DENY"
# fi
# if [[ $RESPONSE = "ALLOW" ]]; then
#     exit 0
# fi
# logger "$RESPONSE sshd connection from $1 ($COUNTRY)"
# exit 1
#
# sudo chmod 775 /usr/local/bin/sshd-filter-by-country.sh
# Add "sshd: ALL" to /etc/hosts.deny
# Add "sshd: ALL: aclexec /usr/local/bin/sshd-filter-by-country.sh %a" to /etc/hosts.allow
# sudo service sshd restart

function echoerr() { echo "$@" 1>&2; }

function commandExists() { command -v "$1" > /dev/null 2>&1; }

function checkCommand()
{
    local package
    if [[ $# -lt 2 ]]; then package=$1; else package=$2; fi
    if ! commandExists "$1"; then
        echoerr "$1 command not found, please install the '$package' package"
        exit 1
    fi
}

checkCommand geoiplookup geoip-bin
checkCommand sponge moreutils
checkCommand gzip gzip
checkCommand file file
checkCommand grep grep
checkCommand wc coreutils
checkCommand colordiff colordiff

cd -- "$( mktemp -d )"

touch auth.log.all
find /var/log -mindepth 1 -maxdepth 1 -type f -name 'auth.log*' -exec bash -c '
    if file --brief --mime-type -- "$0" | command grep -q gzip; then
        gzip -c -d "$0" >> auth.log.all
    else
        cat -- "$0" >> auth.log.all
    fi
' {} \;

echoerr -e "\e[37mCollected $( cat auth.log.all | wc -l ) lines from /var/log/auth.log* into $( pwd )/auth.log.all\e[0m"

cat auth.log.all | sed -nE '
    s|.*sshd.*User .* from ([^ ]*) not allowed.*|\1|p;
    s|.*sshd.*Invalid user .* from ([^ ]*).*|\1|p;
    #s|.*sshd.*Received disconnect from ([^ ]*).*|\1|p; # can also be valid disconnect!
    s|.*sshd.*Failed password for .* from ([0-9.]+).*|\1|p;
    s|.*sshd.* Unable to negotiate with ([0-9.]+).*|\1|p;
    s|.*sshd.* banner exchange: Connection from ([0-9.]+) .* invalid format.*|\1|p;
' | sed -r '
    s|(10\.0\.0\..*)|#\1|; # Reserved IP range used for my WLAN hotspot
    s|(127\.0\.0\.1)|#\1|; # Reserved Address for loopback addresses
    s|(::1)|#\1|; # IPv6 loopback address
    s|(141\.30\..*)|#\1|; # TUD
    s|(141\.75\..*)|#\1|; # TUD
    s|(141\.76\..*)|#\1|; # TUD
    # s|(87\.157\..*)|#\1|; # 1&1
    # s|(92\.116\..*)|#\1|; # 1&1
    # s|(92\.117\..*)|#\1|; # 1&1
' > found.lst

echoerr -e "\e[37mExtracted $( cat found.lst | wc -l ) possible intruder IPs into $( pwd )/found.lst\e[0m"

# append already existing blocks deleting the existing timestamps in order to find duplicates
'cp' /etc/fail2ban/ip.blacklist . # copy as backup
sed 's|[ \t]*\[.*\]$||' ip.blacklist >> found.lst # delete timestamps and append old blacklist to new one
sort -n found.lst | uniq | sponge found.lst
# Block ranges if more than one in a range attacked
# delete last range and count multiples (already sorted, so not needed)
sed 's|[0-9]*[ \t]*$||' found.lst | uniq -c | sed '/^[ \t]*1 /d; s|\.$|.0/24|; s|^[ \t]*[0-9]* ||' > ip.blacklist.ranges
sed -n '/.0\/24/p' found.lst >> ip.blacklist.ranges
# https://unix.stackexchange.com/questions/76049/what-is-the-difference-between-sort-u-and-sort-uniq
# DO NOT USE sort -u -n, it seems to compare only the first part of the string for uniqueness -.-! Imo, BUG!
# Also, sort -n for IPs only seems to work for the first IP range -.- not all thereafter!? THIS FUCKING DUMB FUCK
# https://www.gnu.org/software/coreutils/faq/coreutils-faq.html#Sort-does-not-sort-in-normal-order_0021
sort -n ip.blacklist.ranges | uniq | sponge ip.blacklist.ranges

# Find multiple (>=3) range bans with same initial IPs like:
#     221.194.44.0/24
#     221.194.47.0/24
#     221.194.49.0/24
# and range ban the next higher range i.e.
#     221.194.0.0/16
sed -n 's|[0-9]*\.0/24[ \t]*$||p' ip.blacklist.ranges | uniq -c | sed '/^[ \t]*[12] /d; s|\.$|.0.0/16|; s|^[ \t]*[0-9]* ||' > ip.blacklist.large.ranges

echoerr -e "\e[37mFound enough suspicious IPs for $( cat ip.blacklist.large.ranges | wc -l ) subnet mask /16 range bans, see $( pwd )/ip.blacklist.large.ranges\e[0m"

# Delete ips which are already included in range bans
# sed 's|[.]|[.]|g' -> replaces "." with "[.]"!
while read -u 5 ipescaped; do
    sed -i "/^$ipescaped/d" found.lst
done 5< <( sed -n 's|.0/24|.|p; s|.0.0/16|.|p;' ip.blacklist.ranges | sed 's|[.]|[.]|g' )

# Delete ranges which are already included in large range bans
while read -u 5 ipescaped; do
    sed -i "/^$ipescaped/d" found.lst
    sed -i "/^$ipescaped/d" ip.blacklist.ranges
done 5< <( sed -n 's|.0/24|.|p; s|.0.0/16|.|p;' ip.blacklist.large.ranges | sed 's|[.]|[.]|g' )

cat ip.blacklist.ranges ip.blacklist.large.ranges >> found.lst

# for some reason I had a case with \r which results in uniq not deleting two seemingly identical lines
# similarly end of line whitespaces need to be deleted
sort -n found.lst | sed 's|\r||g; s|[ \t]*$||;' | uniq | sponge found.lst


echoerr -e "\e[37mAppended to the existing blacklist with $( cat ip.blacklist | wc -l ) entries, removed duplicates and collapsed to IP ranges to get a new blacklist with $( cat found.lst | wc -l ) entries in $( pwd )/found.lst\e[0m"

# And add timestamps to ips from either old ip.blacklist or the auth.logs
echo '' > found.lst.unpretty
nIps=$( wc -l found.lst )
iIp=1
while read -u 5 ip; do
    ipraw=${ip%.0/24}   # delete ranging to get e.g. 2.105.219
    ipraw=${ipraw#\#}   # delete hashtag e.g. as in #::1
    # find timestamp in auth.log by using $ipraw
    timestamp=$( 'grep' --no-filename -F "$ipraw" auth.log* |
                 'sed' -nr '1s|^([A-Za-z]+[ \t]+[0-9]+[ \t]+[0-9:]+).*|\1|p' )
    if [[ -z "$timestamp" ]]; then
        timestamp=$( 'grep' --no-filename -F "$ipraw" ip.blacklist |
                     'sed' -nr '1s|.*\[([0-9 :-]+)\]$|\1|p' )
    fi
    if [[ -z "$timestamp" ]]; then
        echo "No timestamp corresponding to found IP: '$ipraw' found. This should not happen. Using 'now' as timestamp"
        timestamp='now'
    elif [ "$( date --date="$timestamp" '+%s' )" -gt "$( date +%s )" ]; then
        # bug: timestamps in auth.log are like 'Nov 16 01:37:07' ... But when using
        #      this with -date --date=$timetamp, the current year will be assumed,
        #      possibly yielding a date in the future
        timestamp="$timestamp last year"
    fi
    #echoerr "Reformat timestamp: '$timestamp' to [$( date --date="$timestamp" '+%Y-%m-%d %H:%M:%S' )]"
    echo "${ip}+[$( date --date="$timestamp" '+%Y-%m-%d %H:%M:%S' )]" >> found.lst.unpretty
    echoerr -n -e "\e[37mAdding timestamp to IPs [$iIp/$nIps]\e[0m\r"
    (( iIp += 1 ))
done 5< found.lst

echo -e "\e[37mAdded timestamp information as contents to the blacklist file\e[0m"

echoerr
# align timestamps to be on the same character column
#sed -i 's;[ \t]+$;|+['"$(date '+%d/%m/%Y %H:%M:%S')"'];' found.lst
#cp found.lst found.lst.unpretty
column -s '+' -t -e found.lst.unpretty > found.lst

#cat found.lst # cat before echo 'cp', because I missed it and thought I had to copy it myself
colordiff ip.blacklist found.lst
echo sudo 'cp' found.lst /etc/fail2ban/ip.blacklist
sudo 'cp' found.lst /etc/fail2ban/ip.blacklist
sudo service fail2ban restart
#rm -r "$(pwd)"

exit 0

# https://unix.stackexchange.com/questions/7399/ip-to-country-console-command
url='http://www.geoiptool.com/en/?IP='
while read -u 5 ip; do
    #lynx -dump "$url$ip" | sed -n '/Hostname:/,/City:/p'
    #printf '% -16s ' "$ip"; lynx -dump "$url$ip" | sed -nr 's|.*Country Code:[ \t]*(.*)[ \t]*|\1|p' | head -1
    geoiplookup "$ip" | sed 's|.*: ||'
done 5< <( sed 's|[ \t]*$||' found.lst )

echo 'Remember to force a new parsing of the blacklist by deleting the fail2ban database:'
echo '  file=$( sudo fail2ban-client get dbfile | sed -nr "s|\\`- ||p" )'
echo '  sudo service fail2ban stop'
echo "  sudo rm \"$file\""
echo '  sudo service fail2ban start'
